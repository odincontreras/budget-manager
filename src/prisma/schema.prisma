// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int            @id @default(autoincrement())
  email            String         @unique
  name             String
  lastName         String
  password         String         @unique
  isVerified       Boolean        @default(false)
  confimationToken String?
  currencies       Currency[]
  incomes          Income[]
  expenses         Expense[]
  userCurrencies   UserCurrency[]
}

model Currency {
  id           Int            @id @default(autoincrement())
  name         String
  symbol       String
  users        User[]
  incomes      Income[]
  expenses     Expense[]
  UserCurrency UserCurrency[]
}

model UserCurrency {
  userId              Int
  currencyId          Int
  weeklySpendingGoal  Int?
  monthlySpendingGoal Int?
  isDefault           Boolean  @default(false)
  user                User     @relation(fields: [userId], references: [id])
  currency            Currency @relation(fields: [currencyId], references: [id])

  @@id([userId, currencyId])
}

model Income {
  id          Int      @id @default(autoincrement())
  amount      Int
  description String?
  currencyId  Int
  userId      Int
  date        DateTime @default(now())
  currency    Currency @relation(fields: [currencyId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  expenses Expense[]
}

model Expense {
  id          Int      @id @default(autoincrement())
  amount      Int
  description String?
  userId      Int
  currencyId  Int
  categoryId  Int
  date        DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  currency    Currency @relation(fields: [currencyId], references: [id])
  category    Category @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}
